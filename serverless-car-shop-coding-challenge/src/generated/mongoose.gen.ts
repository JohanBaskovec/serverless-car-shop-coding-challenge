/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of DealerDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `DealerDocument.toObject()`. To avoid conflicts with model names, use the type alias `DealerObject`.
 * ```
 * const dealerObject = dealer.toObject();
 * ```
 */
export type Dealer = {
  name: string;
  vehicles: (Vehicle["_id"] | Vehicle)[];
  _id: mongoose.Types.ObjectId;
  creationDate?: Date;
  lastUpdateDate?: Date;
};

/**
 * Lean version of DealerDocument (type alias of `Dealer`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Dealer } from "../models"
 * import { DealerObject } from "../interfaces/mongoose.gen.ts"
 *
 * const dealerObject: DealerObject = dealer.toObject();
 * ```
 */
export type DealerObject = Dealer;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type DealerQuery = mongoose.Query<any, DealerDocument, DealerQueries> &
  DealerQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `DealerSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type DealerQueries = {};

export type DealerMethods = {};

export type DealerStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Dealer = mongoose.model<DealerDocument, DealerModel>("Dealer", DealerSchema);
 * ```
 */
export type DealerModel = mongoose.Model<DealerDocument, DealerQueries> &
  DealerStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Dealer schema instances:
 * ```
 * const DealerSchema: DealerSchema = new mongoose.Schema({ ... })
 * ```
 */
export type DealerSchema = mongoose.Schema<
  DealerDocument,
  DealerModel,
  DealerMethods,
  DealerQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Dealer = mongoose.model<DealerDocument, DealerModel>("Dealer", DealerSchema);
 * ```
 */
export type DealerDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  DealerQueries
> &
  DealerMethods & {
    name: string;
    vehicles: mongoose.Types.Array<VehicleDocument["_id"] | VehicleDocument>;
    _id: mongoose.Types.ObjectId;
    creationDate?: Date;
    lastUpdateDate?: Date;
  };

/**
 * Lean version of VehicleDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VehicleDocument.toObject()`. To avoid conflicts with model names, use the type alias `VehicleObject`.
 * ```
 * const vehicleObject = vehicle.toObject();
 * ```
 */
export type Vehicle = {
  make: string;
  vehicleModel: string;
  transmission: "manual" | "automatic" | "semiAutomatic";
  fuelType: "petrol" | "diesel" | "eletric" | "lpg" | "hybrid";
  mileage: number;
  vehicleType:
    | "cabriolet"
    | "coupe"
    | "estateCar"
    | "suv"
    | "saloon"
    | "van"
    | "smallCar"
    | "other";
  color: string;
  dealer: Dealer["_id"] | Dealer;
  _id: mongoose.Types.ObjectId;
  creationDate?: Date;
  lastUpdateDate?: Date;
};

/**
 * Lean version of VehicleDocument (type alias of `Vehicle`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Vehicle } from "../models"
 * import { VehicleObject } from "../interfaces/mongoose.gen.ts"
 *
 * const vehicleObject: VehicleObject = vehicle.toObject();
 * ```
 */
export type VehicleObject = Vehicle;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type VehicleQuery = mongoose.Query<
  any,
  VehicleDocument,
  VehicleQueries
> &
  VehicleQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `VehicleSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type VehicleQueries = {};

export type VehicleMethods = {};

export type VehicleStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Vehicle = mongoose.model<VehicleDocument, VehicleModel>("Vehicle", VehicleSchema);
 * ```
 */
export type VehicleModel = mongoose.Model<VehicleDocument, VehicleQueries> &
  VehicleStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Vehicle schema instances:
 * ```
 * const VehicleSchema: VehicleSchema = new mongoose.Schema({ ... })
 * ```
 */
export type VehicleSchema = mongoose.Schema<
  VehicleDocument,
  VehicleModel,
  VehicleMethods,
  VehicleQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Vehicle = mongoose.model<VehicleDocument, VehicleModel>("Vehicle", VehicleSchema);
 * ```
 */
export type VehicleDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  VehicleQueries
> &
  VehicleMethods & {
    make: string;
    vehicleModel: string;
    transmission: "manual" | "automatic" | "semiAutomatic";
    fuelType: "petrol" | "diesel" | "eletric" | "lpg" | "hybrid";
    mileage: number;
    vehicleType:
      | "cabriolet"
      | "coupe"
      | "estateCar"
      | "suv"
      | "saloon"
      | "van"
      | "smallCar"
      | "other";
    color: string;
    dealer: DealerDocument["_id"] | DealerDocument;
    _id: mongoose.Types.ObjectId;
    creationDate?: Date;
    lastUpdateDate?: Date;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
