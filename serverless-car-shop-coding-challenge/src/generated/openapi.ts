/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
    '/vehicle': {
    /** @description Get all vehicles, optionally filter by dealer */
        get: {
            parameters: {
                query: {
                    dealer?: string
                }
            }
            responses: {
                /** @description Success */
                200: {
                    content: {
                        'application/json': components['schemas']['VehiclesResponse']
                    }
                }
                /** @description Server error */
                500: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
            }
        }
        /** @description Create a new vehicle */
        post: {
            requestBody?: {
                content: {
                    'application/json': components['schemas']['CreateVehicleDTO']
                }
            }
            responses: {
                /** @description Success */
                200: {
                    content: {
                        'application/json': components['schemas']['VehicleResponse']
                    }
                }
                /** @description User error */
                400: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Entity not found */
                404: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Server error */
                500: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
            }
        }
        /** @description Update a new vehicle */
        patch: {
            requestBody?: {
                content: {
                    'application/json': components['schemas']['UpdateVehicleDTO']
                }
            }
            responses: {
                /** @description Success */
                200: {
                    content: {
                        'application/json': components['schemas']['VehicleResponse']
                    }
                }
                /** @description User error */
                400: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Entity not found */
                404: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Server error */
                500: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
            }
        }
    }
    '/vehicle/{id}': {
    /** @description Delete vehicle */
        delete: {
            parameters: {
                path: {
                    id: string
                }
            }
            responses: {
                /** @description Success */
                200: {
                    content: {
                        'application/json': components['schemas']['DeleteResponse']
                    }
                }
                /** @description User error */
                400: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Entity not found */
                404: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Server error */
                500: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
            }
        }
        parameters: {
            path: {
                id: string
            }
        }
    }
    '/dealer': {
    /** @description Get all dealers */
        get: {
            responses: {
                /** @description Success */
                200: {
                    content: {
                        'application/json': components['schemas']['DealersResponse']
                    }
                }
                /** @description Server error */
                500: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
            }
        }
        /** @description Create a new dealer */
        post: {
            requestBody?: {
                content: {
                    'application/json': components['schemas']['CreateDealerDTO']
                }
            }
            responses: {
                /** @description Success */
                200: {
                    content: {
                        'application/json': components['schemas']['DealerResponse']
                    }
                }
                /** @description User error */
                400: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Entity not found */
                404: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Server error */
                500: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
            }
        }
        /** @description Update a dealer */
        patch: {
            requestBody?: {
                content: {
                    'application/json': components['schemas']['UpdateDealerDTO']
                }
            }
            responses: {
                /** @description Success */
                200: {
                    content: {
                        'application/json': components['schemas']['DealerResponse']
                    }
                }
                /** @description User error */
                400: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Entity not found */
                404: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Server error */
                500: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
            }
        }
    }
    '/dealer/{id}': {
    /** @description Delete a dealer */
        delete: {
            parameters: {
                path: {
                    id: string
                }
            }
            responses: {
                /** @description Success */
                200: {
                    content: {
                        'application/json': components['schemas']['DeleteResponse']
                    }
                }
                /** @description User error */
                400: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Entity not found */
                404: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
                /** @description Server error */
                500: {
                    content: {
                        'application/json': components['schemas']['ErrorResponse']
                    }
                }
            }
        }
        parameters: {
            path: {
                id: string
            }
        }
    }
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        MongoDocument: {
            _id?: string
            __v?: number
        }
        /** @enum {string} */
        FuelTypeEnum: 'petrol' | 'diesel' | 'eletric' | 'lpg' | 'hybrid'
        /** @enum {string} */
        VehicleTypeEnum: 'cabriolet' | 'coupe' | 'estateCar' | 'suv' | 'saloon' | 'van' | 'smallCar' | 'other'
        /** @enum {string} */
        TransmissionEnum: 'manual' | 'automatic' | 'semiAutomatic'
        Transmission: Array<components['schemas']['TransmissionEnum']>
        FuelType: Array<components['schemas']['FuelTypeEnum']>
        VehicleType: Array<components['schemas']['VehicleTypeEnum']>
        Timestamps: {
            creationDate?: string
            lastUpdateDate?: string
        }
        Vehicle: WithRequired<{
            make: string
            vehicleModel: string
            transmission: components['schemas']['TransmissionEnum']
            fuelType: components['schemas']['FuelTypeEnum']
            mileage: number
            vehicleType: components['schemas']['VehicleTypeEnum']
            color: string
            dealer: string
        } & components['schemas']['Timestamps'] & components['schemas']['MongoDocument'], '_id' | '__v' | 'make' | 'vehicleModel' | 'transmission' | 'fuelType' | 'mileage' | 'color' | 'dealer' | 'vehicleType' | 'creationDate' | 'lastUpdateDate'>
        CreateVehicleDTO: {
            make: components['schemas']['Vehicle']['make']
            vehicleModel: components['schemas']['Vehicle']['vehicleModel']
            transmission: components['schemas']['Vehicle']['transmission']
            fuelType: components['schemas']['Vehicle']['fuelType']
            mileage: components['schemas']['Vehicle']['mileage']
            color: components['schemas']['Vehicle']['color']
            dealer: components['schemas']['Vehicle']['dealer']
            vehicleType: components['schemas']['Vehicle']['vehicleType']
        }
        UpdateVehicleDTO: {
            _id: string
            make?: components['schemas']['Vehicle']['make']
            vehicleModel?: components['schemas']['Vehicle']['vehicleModel']
            transmission?: components['schemas']['Vehicle']['transmission']
            fuelType?: components['schemas']['Vehicle']['fuelType']
            mileage?: components['schemas']['Vehicle']['mileage']
            color?: components['schemas']['Vehicle']['color']
            dealer?: components['schemas']['Vehicle']['dealer']
            vehicleType?: components['schemas']['Vehicle']['vehicleType']
        }
        CreateDealerDTO: {
            name: components['schemas']['Dealer']['name']
            vehicles: components['schemas']['Dealer']['vehicles']
        }
        UpdateDealerDTO: {
            _id: string
            name?: components['schemas']['Dealer']['name']
            vehicles?: components['schemas']['Dealer']['vehicles']
        }
        Dealer: WithRequired<{
            name: string
            vehicles: (string)[]
        } & components['schemas']['Timestamps'] & components['schemas']['MongoDocument'], '_id' | '__v' | 'name' | 'vehicles' | 'creationDate' | 'lastUpdateDate'>
        OkResponse: {
            data: Record<string, never>
        }
        ErrorResponse: {
            error?: {
                type?: string
                message?: string
            }
        }
        VehicleResponse: {
            data?: components['schemas']['Vehicle']
        }
        VehiclesResponse: {
            data?: Array<components['schemas']['Vehicle']>
        }
        DealerResponse: {
            data?: components['schemas']['Dealer']
        }
        DealersResponse: {
            data?: Array<components['schemas']['Dealer']>
        }
        DeleteResponse: {
            data?: {
                acknowledged?: boolean
                deletedCount?: number
            }
        }
    }
    responses: never
    parameters: never
    requestBodies: never
    headers: never
    pathItems: never
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
